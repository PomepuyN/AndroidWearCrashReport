apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

version '0.2'
artifact_id = 'crashreport-mobile'

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'

    defaultConfig {
        applicationId "fr.nicolaspomepuy.androidwearcrashreport"
        minSdkVersion 9
        targetSdkVersion 20
        versionCode 2
        versionName "0.2"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.google.android.gms:play-services-wearable:5.0.77'
    compile 'com.google.android.support:wearable:+'
}

//Releasing part

android.libraryVariants
publishing {
    publications {
        maven(MavenPublication) {
            artifact 'build/outputs/aar/mobile-0.2.aar'
            artifactId 'crashreport-mobile'
            groupId 'fr.nicolaspomepuy.androidwearcrashreport'
        }
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

configurations {
    archives {
        extendsFrom configurations.default
    }
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeRepo) {
            authentication(userName: sonatypeUsername,
                    password: sonatypePassword)
        }
        snapshotRepository(url: sonatypeSnapshotRepo) {
            authentication(userName: sonatypeUsername,
                    password: sonatypePassword)
        }

        pom.project {
            name 'Crash reporter for Android Wear device'
            packaging 'aar'
            description "Allows you to retrieve exceptions of an Android Wear app in your handheld's one"
            url 'https://github.com/PomepuyN/AndroidWearCrashReport'
            artifactId 'crashreport-mobile'
            groupId 'fr.nicolaspomepuy.androidwearcrashreport'

            scm {
                url 'scm:git@github.com:PomepuyN/AndroidWearCrashReport.git'
                connection 'scm:git@github.com:PomepuyN/AndroidWearCrashReport.git'
                developerConnection 'scm:git@github.com:PomepuyN/AndroidWearCrashReport.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'npomepuy'
                    name 'Nicolas POMEPUY'
                    email 'nicolas.pomepuy@gmail.com'
                }
            }
        }
    }

    android.libraryVariants.all { variant ->

        task("generate${variant.name}Javadoc", type: Javadoc) {
            title = "$name $version API"
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar =
                    "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.links("http://d.android.com/reference/");
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }

    }
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java
    }

    task androidJavadocsJar(type: Jar) {
        classifier = 'javadoc'
        basename = artifact_id
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        basename = artifact_id
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
//        archives packageReleaseJar
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
